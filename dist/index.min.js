"use strict";function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var _express=_interopRequireDefault(require("express")),_mongoose=_interopRequireDefault(require("mongoose")),dotenv=_interopRequireWildcard(require("dotenv")),_cors=_interopRequireDefault(require("cors")),_createImageRoutes=_interopRequireDefault(require("./routes/createImageRoutes.js")),_postRoutes=_interopRequireDefault(require("./routes/postRoutes.js"));function _getRequireWildcardCache(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return _getRequireWildcardCache=function(){return e},e}function _interopRequireWildcard(e){if(e&&e.__esModule)return e;if(null===e||"object"!==_typeof(e)&&"function"!=typeof e)return{default:e};var t=_getRequireWildcardCache();if(t&&t.has(e))return t.get(e);var r={},o=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var u=o?Object.getOwnPropertyDescriptor(e,n):null;u&&(u.get||u.set)?Object.defineProperty(r,n,u):r[n]=e[n]}return r.default=e,t&&t.set(e,r),r}function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}var nodev=process.env.NODE_VERSION="18.15.0";dotenv.config();var app=(0,_express.default)(),port=1710;app.use((0,_cors.default)()),app.use(_express.default.json({limit:"50mb"})),app.use("/api/v1/post",_postRoutes.default),app.use("/api/v1/createImage",_createImageRoutes.default),app.get("/",function(e,t){return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:t.send("Hello from SERVER!");case 1:case"end":return e.stop()}})});var startServer=function(){return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:try{_mongoose.default.set("strictQuery",!0),_mongoose.default.connect(process.env.MONGODB_URI).then(function(){return console.log("MongoDB connected successfully!")}).catch(function(e){return console.log(e)}),app.listen(port,function(){console.log("Server has started on port http://localhost:".concat(port))})}catch(e){console.log(e)}case 1:case"end":return e.stop()}})};startServer();
//# sourceMappingURL=index.min.js.map
